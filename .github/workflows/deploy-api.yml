name: Deploy API to Cloudflare Workers

on:
  # Only trigger manually or when API-only changes are made
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean
  # Only auto-trigger if ONLY API files changed (not when other apps also changed)
  push:
    branches: [main, develop]
    paths:
      - 'apps/api/**'
      - '.github/workflows/deploy-api.yml'
    # This will be overridden by path filtering logic below

env:
  NODE_VERSION: '20'

jobs:
  # Check if this should run (avoid conflicts with full-stack deployment)
  check-should-run:
    runs-on: ubuntu-latest
    name: üîç Check Deployment Strategy
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      environment: ${{ steps.check.outputs.environment }}
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Determine if API-only deployment should run
        id: check
        run: |
          # Always run if manually triggered
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üéØ Manual trigger - running API deployment"
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For push events, check if ONLY API files changed
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "üìÅ Changed files:"
            echo "$CHANGED_FILES"
            
            # Check if any non-API app files changed
            NON_API_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^apps/web/" || true)
            API_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^apps/api/" || true)
            ROOT_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^(package\.json|\.github/workflows/deploy-full-stack\.yml)" || true)
            
            if [ -n "$NON_API_CHANGES" ] || [ -n "$ROOT_CHANGES" ]; then
              echo "üîÑ Non-API changes detected - letting full-stack workflow handle deployment"
              echo "  Non-API changes: $NON_API_CHANGES"
              echo "  Root changes: $ROOT_CHANGES"
              echo "should-run=false" >> $GITHUB_OUTPUT
            elif [ -n "$API_CHANGES" ]; then
              echo "üéØ API-only changes detected - running quick API deployment"
              echo "should-run=true" >> $GITHUB_OUTPUT
              ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
              echo "environment=$ENV" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è No relevant changes detected"
              echo "should-run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ÑπÔ∏è Not a push or workflow_dispatch event"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  # Quick API-only deployment (faster than full-stack)
  deploy-api-only:
    runs-on: ubuntu-latest
    name: üöÄ Quick API Deployment
    needs: check-should-run
    if: needs.check-should-run.outputs.should-run == 'true'
    environment: ${{ needs.check-should-run.outputs.environment }}
    
    outputs:
      api-url: ${{ steps.deploy.outputs.url }}
      environment: ${{ needs.check-should-run.outputs.environment }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/api/package-lock.json'

      - name: üì¶ Install dependencies
        working-directory: apps/api
        run: npm ci

      - name: üîç Run quick tests (optional)
        if: github.event.inputs.force_deploy != 'true'
        working-directory: apps/api
        run: |
          echo "üîç Running quick API tests..."
          # Add your API-specific tests here
          npm run lint || echo "‚ö†Ô∏è Linting issues found but continuing..."
          npm run type-check || echo "‚ö†Ô∏è Type errors found but continuing..."
        continue-on-error: true

      - name: üî® Build Worker & Generate Prisma Client
        working-directory: apps/api
        run: |
          echo "üî® Building API worker..."
          npm run build:worker
          
          # Verify worker.js exists
          if [ ! -f "src/worker.js" ]; then
            echo "‚ùå worker.js not found after build!"
            exit 1
          fi
          
          echo "‚úÖ Worker build completed"
          echo "üìÅ Worker file contents preview:"
          head -20 src/worker.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: üöÄ Deploy to Cloudflare Workers
        id: deploy
        working-directory: apps/api
        run: |
          ENV="${{ needs.check-should-run.outputs.environment }}"
          echo "üöÄ Deploying to $ENV environment..."
          
          # Install wrangler if not available
          npm install -g wrangler@latest
          
          # Deploy using wrangler directly for better control
          wrangler deploy --env $ENV
          
          # Set output URL
          if [ "$ENV" = "production" ]; then
            echo "url=https://sparkmind-api.workers.dev" >> $GITHUB_OUTPUT
          else
            echo "url=https://sparkmind-api-dev.workers.dev" >> $GITHUB_OUTPUT
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: üîê Set Secrets
        working-directory: apps/api
        run: |
          ENV="${{ needs.check-should-run.outputs.environment }}"
          echo "üîê Setting secrets for $ENV environment..."
          
          # Set secrets for the specific environment
          echo "${{ secrets.OPENAI_API_KEY }}" | wrangler secret put OPENAI_API_KEY --env $ENV
          echo "${{ secrets.PRIVY_APP_ID }}" | wrangler secret put PRIVY_APP_ID --env $ENV
          echo "${{ secrets.PRIVY_APP_SECRET }}" | wrangler secret put PRIVY_APP_SECRET --env $ENV
          echo "${{ secrets.DATABASE_URL }}" | wrangler secret put DATABASE_URL --env $ENV
          
          # Optional: Set OpenAI model configuration
          if [ "${{ secrets.OPENAI_MODEL }}" != "" ]; then
            echo "${{ secrets.OPENAI_MODEL }}" | wrangler secret put OPENAI_MODEL --env $ENV
          fi
          
          if [ "${{ secrets.OPENAI_MAX_TOKENS }}" != "" ]; then
            echo "${{ secrets.OPENAI_MAX_TOKENS }}" | wrangler secret put OPENAI_MAX_TOKENS --env $ENV
          fi
          
          if [ "${{ secrets.OPENAI_TEMPERATURE }}" != "" ]; then
            echo "${{ secrets.OPENAI_TEMPERATURE }}" | wrangler secret put OPENAI_TEMPERATURE --env $ENV
          fi
          
          echo "‚úÖ Secrets configured successfully"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: üè• Health Check & Test Deployment
        run: |
          # Wait for deployment to propagate
          sleep 20
          
          WORKER_URL="${{ steps.deploy.outputs.url }}"
          echo "üîç Testing deployment at: $WORKER_URL"
          
          # Test health endpoint
          echo "Testing health endpoint..."
          health_response=$(curl -s -o /dev/null -w "%{http_code}" "$WORKER_URL/health" || echo "000")
          if [ "$health_response" = "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status $health_response"
            echo "üîç Debugging health endpoint..."
            curl -v "$WORKER_URL/health" || true
          fi
          
          # Test AI agents endpoint (replacing avatars endpoint)
          echo "Testing agents/public endpoint..."
          agents_response=$(curl -s -o /dev/null -w "%{http_code}" "$WORKER_URL/agents/public" || echo "000")
          echo "üìä AI Agents endpoint status: $agents_response"
          
          if [ "$agents_response" = "200" ]; then
            echo "‚úÖ AI Agents endpoint test passed"
            
            # Test actual response content
            agent_data=$(curl -s "$WORKER_URL/agents/public")
            echo "üìã AI Agent response sample:"
            echo "$agent_data" | jq '.' || echo "$agent_data"
          else
            echo "‚ö†Ô∏è AI Agents endpoint returned status $agents_response"
            echo "üîç Full response:"
            curl -v "$WORKER_URL/agents/public" || true
          fi
          
          # Test agent status endpoint
          echo "Testing agents/status endpoint..."
          status_response=$(curl -s -o /dev/null -w "%{http_code}" "$WORKER_URL/agents/status" || echo "000")
          echo "üìä Agent Status endpoint status: $status_response"
          
          if [ "$status_response" = "200" ]; then
            echo "‚úÖ Agent Status endpoint test passed"
          else
            echo "‚ö†Ô∏è Agent Status endpoint returned status $status_response"
            curl -v "$WORKER_URL/agents/status" || true
          fi
          
          # Test auth/me endpoint (should return 401 for unauthorized)
          echo "Testing auth/me endpoint..."
          auth_response=$(curl -s -o /dev/null -w "%{http_code}" "$WORKER_URL/auth/me" || echo "000")
          echo "üìä Auth endpoint status: $auth_response"
          
          if [ "$auth_response" = "401" ] || [ "$auth_response" = "503" ]; then
            echo "‚úÖ Auth endpoint correctly returns $auth_response (expected for unauthorized)"
          else
            echo "‚ÑπÔ∏è Auth endpoint returned: $auth_response"
            curl -v "$WORKER_URL/auth/me" || true
          fi

      - name: üìä Deployment Summary
        run: |
          ENV="${{ needs.check-should-run.outputs.environment }}"
          WORKER_URL="${{ steps.deploy.outputs.url }}"
          
          echo "# üöÄ AI Agent API Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`$ENV\`" >> $GITHUB_STEP_SUMMARY
          echo "**Worker URL:** [$WORKER_URL]($WORKER_URL)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Type:** API-Only (Quick)" >> $GITHUB_STEP_SUMMARY
          echo "**AI Agent Platform:** OpenAI GPT-4o-mini" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üß™ Test Endpoints:" >> $GITHUB_STEP_SUMMARY
          echo "| Endpoint | URL | Expected |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-----|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Health | [$WORKER_URL/health]($WORKER_URL/health) | 200 OK |" >> $GITHUB_STEP_SUMMARY
          echo "| AI Agents | [$WORKER_URL/agents/public]($WORKER_URL/agents/public) | 200 + agent data |" >> $GITHUB_STEP_SUMMARY
          echo "| Agent Status | [$WORKER_URL/agents/status]($WORKER_URL/agents/status) | 200 OK |" >> $GITHUB_STEP_SUMMARY
          echo "| Auth | [$WORKER_URL/auth/me]($WORKER_URL/auth/me) | 401 (no auth) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ü§ñ AI Agent Features:" >> $GITHUB_STEP_SUMMARY
          echo "- Professional Advisor" >> $GITHUB_STEP_SUMMARY
          echo "- Creative Assistant" >> $GITHUB_STEP_SUMMARY
          echo "- Technical Expert" >> $GITHUB_STEP_SUMMARY
          echo "- Health & Wellness Coach" >> $GITHUB_STEP_SUMMARY
          echo "- Career Counselor" >> $GITHUB_STEP_SUMMARY
          echo "- General Assistant" >> $GITHUB_STEP_SUMMARY

  # Comment on PR with deployment info
  comment-pr:
    runs-on: ubuntu-latest
    name: üí¨ Comment on PR
    needs: [check-should-run, deploy-api-only]
    if: github.event_name == 'pull_request' && needs.deploy-api-only.result == 'success'
    
    steps:
      - name: üí¨ Add PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const apiUrl = '${{ needs.deploy-api-only.outputs.api-url }}';
            const environment = '${{ needs.deploy-api-only.outputs.environment }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **AI Agent API Deployment Preview Ready!**\n\n**Environment:** \`${environment}\`\n**API URL:** [${apiUrl}](${apiUrl})\n**Type:** Quick API deployment (AI Agent Platform)\n**AI Engine:** OpenAI GPT-4o-mini\n\n### üß™ Test Endpoints:\n- Health: [${apiUrl}/health](${apiUrl}/health) (expect 200)\n- AI Agents: [${apiUrl}/agents/public](${apiUrl}/agents/public) (expect 200 + agent data)\n- Agent Status: [${apiUrl}/agents/status](${apiUrl}/agents/status) (expect 200)\n- Auth: [${apiUrl}/auth/me](${apiUrl}/auth/me) (expect 401)\n\n### ü§ñ Available AI Agents:\n- Professional Advisor\n- Creative Assistant\n- Technical Expert\n- Health & Wellness Coach\n- Career Counselor\n- General Assistant\n\n*This deployment uses OpenAI for intelligent chat-based AI agents.*`
            }); 